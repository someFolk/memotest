package com.thebreadiswhite.memotest.db;

import androidx.room.ColumnInfo;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;
import com.google.firebase.database.Exclude;

import java.util.HashMap;
import java.util.Map;

// This class is a concrete foundation of every object
// That supposed to get stored on the database
public abstract class DatabaseAdapter
{
    // For that value to be accourate across all users feeding from the table
    // we need the user to deliver the full object with it's client key.
    // We are doing it by having a system that is responsible of figuring out which
    // client key position the saved key on the server supposed to be.
    @ColumnInfo(name = "client_key")
    @PrimaryKey(autoGenerate = true)
    protected int clientKey;

    // This is the server key generated by the Firebase database.
    // The key gets generated when a row allocated on the server.
    @Exclude
    @ColumnInfo(name = "server_key")
    protected String serverKey;


    // TODO: todo a version control with client identifiers = server identifiers
    @Ignore
    @Exclude
    private Map<String, Object> dataMap;

    // The timestamp of which the
    // row has been created.
    @ColumnInfo(name = "timestamp")
    protected long timestamp;

    // This method is responsible of getting the data of the
    // specified object and map it so it can go onto the server.
    public Map<String, Object> getDataMap()
    {
        return dataMap;
    }

    // Checking whether the datamap is initialized
    // Typically gets called by the put operations on this abstract class
    protected boolean isDataMapInitialized(boolean create)
    {
        if(dataMap != null)
        {
            return true;
        }
        if(dataMap == null && create)
        {
            dataMap = new HashMap<>();
            return true;
        }
        return false;
    }

    // Checking whther the data-map is initialized
    // This method is for outside use purposes and quick-access
    protected boolean isDataMapInitialized()
    {
        return isDataMapInitialized(false);
    }

    // Getters Setters
    public int getClientKey()
    {
        return clientKey;
    }
    public void setClientKey(int clientKey)
    {
        this.clientKey = clientKey;
    }
    public String getServerKey()
    {
        return serverKey;
    }
    public void setServerKey(String serverKey)
    {
        this.serverKey = serverKey;
    }
    public long getTimestamp()
    {
        return timestamp;
    }
    public void setTimestamp(long timestamp)
    {
        this.timestamp = timestamp;
    }


    // Supporting boolean
    public void addDataToMap(String key, Boolean data)
    {
        if(isDataMapInitialized(true))
        {
            dataMap.put(key, data);
        }
    }

    // Supporting String
    public void addDataToMap(String key, String data)
    {
        if(isDataMapInitialized(true))
        {
            dataMap.put(key, data);
        }
    }

    // Supporting integer
    public void addDataToMap(String key, int data)
    {
        if(isDataMapInitialized(true))
        {
            dataMap.put(key, data);
        }
    }

    // Supporting maps within maps
    // This method is super effective because you can import
    // Other SQL tables onto the same document on the server
    // This might need polishing because
    // 1. how does the object gonna rebuild itself after it's map has retrieved
    public void addDataToMap(String key, Map data)
    {
        if(isDataMapInitialized(true))
        {
            dataMap.put(key, data);
        }
    }
}
